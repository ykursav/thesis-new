Wrote profile results to mainproc.py.lprof
Timer unit: 1e-06 s

Total time: 341.113 s
File: mainproc.py
Function: initialize_set at line 46

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    46                                           @profile
    47                                           def initialize_set(image):
    48                                               global counter, sigGen
    49     10116      1743917    172.4      0.5      set_initials_pre(128, image, counter, out2)
    50                                               #set_initials_pre(128, image, counter)
    51     10116    267971158  26489.8     78.6      points = get_contour(3)
    52     10116     23392069   2312.4      6.9      check = get_perspective(points, 0)
    53     10116        61159      6.0      0.0      if check == 10:
    54        10           50      5.0      0.0          counter -= 1
    55        10           36      3.6      0.0          return
    56     10106        43353      4.3      0.0      elif check == 20:
    57      8703      7151316    821.7      2.1          logging.debug("Too small detection probably wrong")
    58      8703        55709      6.4      0.0          counter -= 1
    59      8703        33457      3.8      0.0          return
    60      1403       798741    569.3      0.2      crop = get_cropped()
    61      1403        28877     20.6      0.0      sig = bitarray()
    62      1403        39444     28.1      0.0      set_initials(16, 8, 128, crop)
    63      1403         6043      4.3      0.0      try:
    64      1403     39529644  28175.1     11.6          sig = get_signature()
    65      1400        13739      9.8      0.0          if counter < 50:
    66        50          727     14.5      0.0             sigGen.extend(sig)
    67                                                   else:
    68      1350       189962    140.7      0.1             sigGen = sigGen[72:]
    69      1350        22263     16.5      0.0             sigGen[3528:] = sig
    70         3           16      5.3      0.0      except:
    71         3         1841    613.7      0.0          logging.debug("Nonetype")
    72         3           19      6.3      0.0          counter -= 1
    73         3           12      4.0      0.0          return
    74      1400         6513      4.7      0.0      if counter >= 49:
    75                                                   #logging.debug(sigGen)
    76      1351        22637     16.8      0.0          set_initials_match(sigGen, 24, 38, 4, 28, 22)

Total time: 190.304 s
File: preprocessing.py
Function: get_edged at line 57

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    57                                           @profile
    58                                           def get_edged(G):
    59                                               global out
    60     10116     18774674   1855.9      9.9      gray = gray_image(image)
    61     10116     27420776   2710.6     14.4      blur = get_blurred(gray, G)
    62                                               #v = median(gray)
    63                                               #lower = int(max(0, (1.0 - 0.33) * v))
    64                                               #upper = int(max(255, (1.0 + 0.33) * v))
    65                                               #th = adaptiveThreshold(blur, 255, ADAPTIVE_THRESH_GAUSSIAN_C, THRESH_BINARY_INV, 11, 1)
    66                                               #ret, th = threshold(blur, lower, upper, THRESH_BINARY)
    67                                               #ret ,th2 = cv2.threshold(blur,0,255,cv2.THRESH_BINARY+cv2.THRESH_OTSU)
    68                                               # cv2.imwrite("Adaptive.jpg", th)
    69                                           ##        cv2.imshow("th", dilation)
    70                                           ##        cv2.waitKey(0)
    71                                           ##        cv2.destroyAllWindows()
    72                                               #imwrite("OTSU/otsu" + str(counter_warped) + ".jpg", th)
    73                                               #print get_width_height(th)
    74                                               #out.write(cvtColor(th, COLOR_GRAY2BGR))
    75                                               #dilated = dilate(th, ones((3,3), uint8),iterations = 1)
    76                                               #dilated = dilate(th, ones((3, 3), uint8), iterations = 1)
    77     10116     86742752   8574.8     45.6      edge = Canny(blur, 100, 200)
    78                                               #Thread(target = write_out, args = (out, dilated,)).start()
    79     10116     57366147   5670.8     30.1      return dilate(edge, ones((3,3), uint8),iterations = 1)

Total time: 255.945 s
File: preprocessing.py
Function: get_contour at line 99

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    99                                           @profile
   100                                           def get_contour(G):
   101     10116    191143840  18895.2     74.7      edged = get_edged(G)
   102     10116     32578137   3220.5     12.7      __, contours, hierarchy = findContours(edged, RETR_LIST, CHAIN_APPROX_SIMPLE)
   103     10116        94900      9.4      0.0      approx = 0
   104     10116        47108      4.7      0.0      first = False
   105     10116        39767      3.9      0.0      no_contour = True
   106     10116        35913      3.6      0.0      last_cnt = 0
   107    505227      1978112      3.9      0.8      for cnt in contours:
   108    495111      5012277     10.1      2.0          epsilon = 0.05 * arcLength(cnt, True)
   109    495111     14585594     29.5      5.7          new_approx = approxPolyDP(cnt, epsilon, True)
   110    495111      2183929      4.4      0.9          if first == False:
   111     14915       188224     12.6      0.1              if check_points(new_approx):
   112     10106        39051      3.9      0.0                  last_cnt = cnt
   113     10106       270168     26.7      0.1                  approx = approxPolyDP(cnt, epsilon, True)
   114     10106        42300      4.2      0.0                  first = True
   115     10106        42396      4.2      0.0                  no_contour = False
   116    480196      3801844      7.9      1.5          elif check_points(new_approx):
   117    242705      3509278     14.5      1.4              if (contourArea(last_cnt) < contourArea(cnt)):
   118     33413       134232      4.0      0.1                  last_cnt = cnt
   119     33413       142367      4.3      0.1                  approx = new_approx
   120                                                           
   121     10116        40221      4.0      0.0      if first == False:
   122        10           34      3.4      0.0          return -1
   123                                               else:
   124     10106        35326      3.5      0.0          return approx

